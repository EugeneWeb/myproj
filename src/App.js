import s from "./App.module.css";
// можно назвать s / styles / classes - в зависимости от договоренностей в команде
// s - объект, который содержит в ключах названия классов, которые мы объявили в App.module.css, а значения ключей - это сгенерированные названия классов react приложением

import Header from "./components/Header/Header";


// .jsx, Модули css особенность, bundle.js
// помимо .js разрешения компоненты также могут быть .jsx разрешения

// При обычном подходе добавления css стилей происходит большая проблему- все стили добавляются ГЛОБАЛЬНО, не инкапсулируются
// Если посмотрим в network какие файлы были загружены, то не найдём файла CSS
// Это происходит из-за того, что все CSS стили с помощью js добавляются на html страницу в виде тего style в head
// поэтому, если мы будем иметь 2 компонента, теги которых имеют одинаковый класс, то может произойти не правильное отображение компонентов
// Для решения этой проблемы самый простой способ добавлять приставку с именем компонента и тире к всем стилям
// Лучший способ избавить от это проблемы - CSS модули
// CSS модули обрабатываются js файлами по-другому(добавляют префиксы к классам), для App будет выглядеть что-то вроде App_className_30Que, данный подход позволяет избежать проблемы с глобальными стилями
// Для создания CSS модулей просто вместо .css пишем .module.css, таким образом react приложение поймёт, что это CSS модуль и будет его соответственно обрабатывать

// bundle.js - это файл, в который собираются все jsx файлы компонентов

function App() {
  return (
    <>
      <Header />
      {/* Так как это объект, то для добавления классов используем такой синтаксис */}
      <h1 className={s.title}>Hello world</h1>

      {/* Если несколько классов, то используем шаблонную строку, чтобы указать правильные класс */}
      {/* <h1 className={`${s.title} ${s.class2}`}>Hello world</h1> */}
    </>
  );
}

export default App;
